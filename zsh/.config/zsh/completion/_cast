#compdef cast

autoload -U is-at-least

_cast() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_cast_commands" \
"*::: :->cast" \
&& ret=0
    case $state in
    (cast)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-command-$line[1]:"
        case $line[1] in
            (--max-int)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--min-int)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--max-uint)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--address-zero)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--hash-zero)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--from-utf8)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::text:' \
&& ret=0
;;
(--concat-hex)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'*::data:' \
&& ret=0
;;
(--from-bin)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(--to-hexdata)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::input:' \
&& ret=0
;;
(--to-checksum-address)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::address:' \
&& ret=0
;;
(--to-ascii)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::hexdata:' \
&& ret=0
;;
(--from-fix)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::decimals:' \
'::value:' \
&& ret=0
;;
(--to-bytes32)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::bytes:' \
&& ret=0
;;
(--to-fix)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::decimals:' \
'::value:' \
&& ret=0
;;
(--to-uint256)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
&& ret=0
;;
(--to-int256)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
&& ret=0
;;
(shl)
_arguments "${_arguments_options[@]}" \
'--base-in=[The input base]:BASE_IN: ' \
'--base-out=[The output base]:BASE_OUT: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':value:' \
':bits:' \
&& ret=0
;;
(shr)
_arguments "${_arguments_options[@]}" \
'--base-in=[The input base]:BASE_IN: ' \
'--base-out=[The output base]:BASE_OUT: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':value:' \
':bits:' \
&& ret=0
;;
(--to-unit)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
'::unit -- The unit to convert to (ether, gwei, wei).:' \
&& ret=0
;;
(--to-wei)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
'::unit:' \
&& ret=0
;;
(--from-wei)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
'::unit:' \
&& ret=0
;;
(--to-rlp)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
&& ret=0
;;
(--from-rlp)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::value:' \
&& ret=0
;;
(--to-base)
_arguments "${_arguments_options[@]}" \
'--base-in=[The input base]:BASE_IN: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':value:' \
':base-out -- The output base:' \
&& ret=0
;;
(access-list)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'--rpc-url=[The RPC endpoint.]:URL: ' \
'--etherscan-api-key=[]:KEY: ' \
'--chain=[]:CHAIN_NAME: ' \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-j[]' \
'--json[]' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- The destination of the transaction.:' \
':sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
&& ret=0
;;
(block)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'--full[]' \
'-j[]' \
'--json[]' \
'-h[Print help information]' \
'--help[Print help information]' \
':block -- The block height you want to query at.:' \
'::field -- If specified, only get the given field of the block.:' \
&& ret=0
;;
(block-number)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(call)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[Gas limit for the transaction.]:GAS_LIMIT: ' \
'--gas-price=[Gas price for legacy transactions, or max fee per gas for EIP1559 transactions.]:PRICE: ' \
'--priority-gas-price=[Max priority fee per gas for EIP1559 transactions.]:PRICE: ' \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'--nonce=[Nonce for the transaction.]:NONCE: ' \
'--rpc-url=[The RPC endpoint.]:URL: ' \
'--etherscan-api-key=[]:KEY: ' \
'--chain=[]:CHAIN_NAME: ' \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'-b+[the block you want to query, can also be earliest/latest/pending]:BLOCK: ' \
'--block=[the block you want to query, can also be earliest/latest/pending]:BLOCK: ' \
'--legacy[Send a legacy transaction instead of an EIP1559 transaction.]' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::to -- The destination of the transaction.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
":: :_cast__call_commands" \
"*::: :->call" \
&& ret=0

    case $state in
    (call)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-call-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':code -- Bytecode of contract.:' \
'::sig -- The signature of the constructor.:' \
'*::args -- Constructor arguments:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(calldata)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':sig -- The function signature.:' \
'*::args:' \
&& ret=0
;;
(chain)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(chain-id)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(client)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(compute-address)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'--nonce=[The nonce of the deployer address.]:NONCE: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- The deployer address.:' \
&& ret=0
;;
(namehash)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':name:' \
&& ret=0
;;
(tx)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-j[]' \
'--json[]' \
'-h[Print help information]' \
'--help[Print help information]' \
':hash:' \
'::field:' \
&& ret=0
;;
(receipt)
_arguments "${_arguments_options[@]}" \
'-c+[The number of confirmations until the receipt is fetched]:CONFIRMATIONS: ' \
'--confirmations=[The number of confirmations until the receipt is fetched]:CONFIRMATIONS: ' \
'--rpc-url=[]:URL: ' \
'--async[Exit immediately if the transaction was not found.]' \
'-j[]' \
'--json[]' \
'-h[Print help information]' \
'--help[Print help information]' \
':hash:' \
'::field:' \
&& ret=0
;;
(send)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[Gas limit for the transaction.]:GAS_LIMIT: ' \
'--gas-price=[Gas price for legacy transactions, or max fee per gas for EIP1559 transactions.]:PRICE: ' \
'--priority-gas-price=[Max priority fee per gas for EIP1559 transactions.]:PRICE: ' \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'--nonce=[Nonce for the transaction.]:NONCE: ' \
'--rpc-url=[The RPC endpoint.]:URL: ' \
'--etherscan-api-key=[]:KEY: ' \
'--chain=[]:CHAIN_NAME: ' \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'-c+[The number of confirmations until the receipt is fetched.]:CONFIRMATIONS: ' \
'--confirmations=[The number of confirmations until the receipt is fetched.]:CONFIRMATIONS: ' \
'--async[Only print the transaction hash and exit immediately.]' \
'--legacy[Send a legacy transaction instead of an EIP1559 transaction.]' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-j[]' \
'--json[]' \
'(--nonce)--resend[Reuse the latest nonce for the sender account.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::to -- The destination of the transaction. If not provided, you must use cast send --create.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
":: :_cast__send_commands" \
"*::: :->send" \
&& ret=0

    case $state in
    (send)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-send-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':code -- Bytecode of contract.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(publish)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[The RPC endpoint.]:URL: ' \
'--etherscan-api-key=[]:KEY: ' \
'--chain=[]:CHAIN_NAME: ' \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'--async[Only print the transaction hash and exit immediately.]' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-h[Print help information]' \
'--help[Print help information]' \
':raw-tx -- The raw transaction:' \
&& ret=0
;;
(estimate)
_arguments "${_arguments_options[@]}" \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'--rpc-url=[The RPC endpoint.]:URL: ' \
'--etherscan-api-key=[]:KEY: ' \
'--chain=[]:CHAIN_NAME: ' \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::to -- The destination of the transaction.:' \
'::sig -- The signature of the function to call.:' \
'*::args -- The arguments of the function to call.:' \
":: :_cast__estimate_commands" \
"*::: :->estimate" \
&& ret=0

    case $state in
    (estimate)
        words=($line[4] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-estimate-command-$line[4]:"
        case $line[4] in
            (--create)
_arguments "${_arguments_options[@]}" \
'--value=[Ether to send in the transaction.]:VALUE: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':code -- Bytecode of contract.:' \
'::sig -- The signature of the constructor.:' \
'*::args -- Constructor arguments:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(--calldata-decode)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':sig -- The function signature in the format `<name>(<in-types>)(<out-types>)`.:' \
':calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(--abi-decode)
_arguments "${_arguments_options[@]}" \
'-i[Decode input data.]' \
'--input[Decode input data.]' \
'-h[Print help information]' \
'--help[Print help information]' \
':sig -- The function signature in the format `<name>(<in-types>)(<out-types>)`.:' \
':calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(abi-encode)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':sig -- The function signature.:' \
'*::args -- The arguments of the function.:' \
&& ret=0
;;
(index)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key-type -- The mapping key type.:' \
':key -- The mapping key.:' \
':slot-number -- The storage slot of the mapping.:' \
&& ret=0
;;
(4byte)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':selector -- The function selector.:' \
&& ret=0
;;
(4byte-decode)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::calldata -- The ABI-encoded calldata.:' \
&& ret=0
;;
(4byte-event)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':topic -- Topic 0:' \
&& ret=0
;;
(upload-signature)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'*::signatures -- The signatures to upload. Prefix with '\''function'\'', '\''event'\'', or '\''error'\''. Defaults to function if no prefix given. Can also take paths to contract artifact JSON.:' \
&& ret=0
;;
(pretty-calldata)
_arguments "${_arguments_options[@]}" \
'-o[Skip the https://sig.eth.samczsun.com lookup.]' \
'--offline[Skip the https://sig.eth.samczsun.com lookup.]' \
'-h[Print help information]' \
'--help[Print help information]' \
':calldata -- The calldata.:' \
&& ret=0
;;
(age)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(balance)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':who -- The account you want to query:' \
&& ret=0
;;
(basefee)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(code)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':who -- The contract address.:' \
&& ret=0
;;
(gas-price)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(keccak)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':data:' \
&& ret=0
;;
(resolve-name)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-v[Perform a reverse lookup to verify that the name is correct.]' \
'--verify[Perform a reverse lookup to verify that the name is correct.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::who -- The name to lookup.:' \
&& ret=0
;;
(lookup-address)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-v[Perform a normal lookup to verify that the address is correct.]' \
'--verify[Perform a normal lookup to verify that the address is correct.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::who -- The account to perform the lookup for.:' \
&& ret=0
;;
(storage)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- The contract address.:' \
':slot -- The storage slot number (hex or decimal):' \
&& ret=0
;;
(proof)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- The contract address.:' \
'*::slots -- The storage slot numbers (hex or decimal).:' \
&& ret=0
;;
(nonce)
_arguments "${_arguments_options[@]}" \
'-B+[The block height you want to query at.]:BLOCK: ' \
'--block=[The block height you want to query at.]:BLOCK: ' \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':who -- The address you want to get the nonce for.:' \
&& ret=0
;;
(etherscan-source)
_arguments "${_arguments_options[@]}" \
'-c+[]:CHAIN:(mainnet morden ropsten rinkeby goerli kovan xdai polygon fantom dev anvil-hardhat fantom-testnet polygon-mumbai avalanche avalanche-fuji sepolia moonbeam moonbase moonbeam-dev moonriver optimism optimism-goerli optimism-kovan arbitrum arbitrum-testnet cronos cronos-testnet bsc bsc-testnet poa sokol rsk oasis emerald emerald-testnet evmos evmos-testnet aurora aurora-testnet)' \
'--chain=[]:CHAIN:(mainnet morden ropsten rinkeby goerli kovan xdai polygon fantom dev anvil-hardhat fantom-testnet polygon-mumbai avalanche avalanche-fuji sepolia moonbeam moonbase moonbeam-dev moonriver optimism optimism-goerli optimism-kovan arbitrum arbitrum-testnet cronos cronos-testnet bsc bsc-testnet poa sokol rsk oasis emerald emerald-testnet evmos evmos-testnet aurora aurora-testnet)' \
'-d+[The output directory to expand source tree into.]:DIRECTORY:_files -/' \
'--etherscan-api-key=[]:KEY: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- The contract'\''s address.:' \
&& ret=0
;;
(wallet)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
":: :_cast__wallet_commands" \
"*::: :->wallet" \
&& ret=0

    case $state in
    (wallet)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:cast-wallet-command-$line[1]:"
        case $line[1] in
            (new)
_arguments "${_arguments_options[@]}" \
'--unsafe-password=[Password for the JSON keystore in cleartext. This is UNSAFE to use and we recommend using the --password.]:PASSWORD: ' \
'(--unsafe-password)-p[Deprecated: prompting for a hidden password is now the default.
            Triggers a hidden password prompt for the JSON keystore.]' \
'(--unsafe-password)--password[Deprecated: prompting for a hidden password is now the default.
            Triggers a hidden password prompt for the JSON keystore.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::path -- If provided, then keypair will be written to an encrypted JSON keystore.:' \
&& ret=0
;;
(vanity)
_arguments "${_arguments_options[@]}" \
'--starts-with=[Prefix for the vanity address.]:HEX: ' \
'--ends-with=[Suffix for the vanity address.]:HEX: ' \
'--nonce=[Generate a vanity contract address created by the generated keypair with the specified nonce.]:NONCE: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(address)
_arguments "${_arguments_options[@]}" \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::private-key-override -- If provided, the address will be derived from the specified private key.:' \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" \
'*--private-key=[Use the provided private key.]:RAW_PRIVATE_KEY: ' \
'--mnemonic=[Use the mnemonic phrase of mnemonic file at the specified path.]:PATH: ' \
'--mnemonic-passphrase=[Use a BIP39 passphrase for the mnemonic.]:PASSPHRASE: ' \
'--mnemonic-derivation-path=[The wallet derivation path. Works with both --mnemonic-path and hardware wallets.]:PATH: ' \
'(--mnemonic-derivation-path)--mnemonic-index=[Use the private key from the given mnemonic index. Used with --mnemonic-path.]:INDEX: ' \
'--keystore=[Use the keystore in the given folder or file.]:PATH: ' \
'--password=[The keystore password. Used with --keystore.]:PASSWORD: ' \
'-f+[The sender account.]:ADDRESS: ' \
'--from=[The sender account.]:ADDRESS: ' \
'-i[Open an interactive prompt to enter your private key.]' \
'--interactive[Open an interactive prompt to enter your private key.]' \
'-l[Use a Ledger hardware wallet.]' \
'--ledger[Use a Ledger hardware wallet.]' \
'-t[Use a Trezor hardware wallet.]' \
'--trezor[Use a Trezor hardware wallet.]' \
'-h[Print help information]' \
'--help[Print help information]' \
':message -- message to sign:' \
&& ret=0
;;
(verify)
_arguments "${_arguments_options[@]}" \
'-a+[The address of the message signer.]:ADDRESS: ' \
'--address=[The address of the message signer.]:ADDRESS: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':message -- The original message.:' \
':signature -- The signature to verify.:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
;;
(interface)
_arguments "${_arguments_options[@]}" \
'-n+[The name to use for the generated interface]:NAME: ' \
'--name=[The name to use for the generated interface]:NAME: ' \
'-p+[Solidity pragma version.]:VERSION: ' \
'--pragma=[Solidity pragma version.]:VERSION: ' \
'-o+[The path to the output file.]:PATH: ' \
'-e+[etherscan API key]:KEY: ' \
'--etherscan-api-key=[etherscan API key]:KEY: ' \
'-c+[]:CHAIN:(mainnet morden ropsten rinkeby goerli kovan xdai polygon fantom dev anvil-hardhat fantom-testnet polygon-mumbai avalanche avalanche-fuji sepolia moonbeam moonbase moonbeam-dev moonriver optimism optimism-goerli optimism-kovan arbitrum arbitrum-testnet cronos cronos-testnet bsc bsc-testnet poa sokol rsk oasis emerald emerald-testnet evmos evmos-testnet aurora aurora-testnet)' \
'--chain=[]:CHAIN:(mainnet morden ropsten rinkeby goerli kovan xdai polygon fantom dev anvil-hardhat fantom-testnet polygon-mumbai avalanche avalanche-fuji sepolia moonbeam moonbase moonbeam-dev moonriver optimism optimism-goerli optimism-kovan arbitrum arbitrum-testnet cronos cronos-testnet bsc bsc-testnet poa sokol rsk oasis emerald emerald-testnet evmos evmos-testnet aurora aurora-testnet)' \
'-h[Print help information]' \
'--help[Print help information]' \
':path-or-address -- The contract address, or the path to an ABI file.:' \
&& ret=0
;;
(sig)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':sig -- The function signature, e.g. transfer(address,uint256).:' \
&& ret=0
;;
(find-block)
_arguments "${_arguments_options[@]}" \
'--rpc-url=[]:URL: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':timestamp -- The UNIX timestamp to search for (in seconds):' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(generate-fig-spec)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'*--label=[Labels address in the trace. 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045:vitalik.eth]:LABEL: ' \
'-d[Debugs the transaction.]' \
'--debug[Debugs the transaction.]' \
'-q[Executes the transaction only with the state from the previous block. May result in different results than the live execution!]' \
'--quick[Executes the transaction only with the state from the previous block. May result in different results than the live execution!]' \
'-v[Prints full address]' \
'--verbose[Prints full address]' \
'-h[Print help information]' \
'--help[Print help information]' \
':tx -- The transaction hash.:' \
&& ret=0
;;
(rpc)
_arguments "${_arguments_options[@]}" \
'-r+[]:URL: ' \
'--rpc-url=[]:URL: ' \
'-w[Pass the "params" as is]' \
'--raw[Pass the "params" as is]' \
'-h[Print help information]' \
'--help[Print help information]' \
':method -- RPC method name:' \
'*::params -- RPC parameters:' \
&& ret=0
;;
(--format-bytes32-string)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::string:' \
&& ret=0
;;
(--parse-bytes32-string)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::bytes:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_cast_commands] )) ||
_cast_commands() {
    local commands; commands=(
'--max-int:Get the maximum i256 value.' \
'max-int:Get the maximum i256 value.' \
'maxi:Get the maximum i256 value.' \
'--min-int:Get the minimum i256 value.' \
'min-int:Get the minimum i256 value.' \
'mini:Get the minimum i256 value.' \
'--max-uint:Get the maximum u256 value.' \
'max-uint:Get the maximum u256 value.' \
'maxu:Get the maximum u256 value.' \
'--address-zero:Get zero address' \
'address-zero:Get zero address' \
'az:Get zero address' \
'--hash-zero:Get zero hash' \
'hash-zero:Get zero hash' \
'hz:Get zero hash' \
'--from-utf8:Convert UTF8 text to hex.' \
'from-utf8:Convert UTF8 text to hex.' \
'--from-ascii:Convert UTF8 text to hex.' \
'from-ascii:Convert UTF8 text to hex.' \
'fu:Convert UTF8 text to hex.' \
'fa:Convert UTF8 text to hex.' \
'--concat-hex:Concatenate hex strings.' \
'concat-hex:Concatenate hex strings.' \
'ch:Concatenate hex strings.' \
'--from-bin:Convert binary data into hex data.' \
'from-bin:Convert binary data into hex data.' \
'fb:Convert binary data into hex data.' \
'--to-hexdata:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'to-hexdata:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'thd:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'2hd:Normalize the input to lowercase, 0x-prefixed hex. See --help for more info.' \
'--to-checksum-address:Convert an address to a checksummed format (EIP-55).' \
'to-checksum-address:Convert an address to a checksummed format (EIP-55).' \
'--to-checksum:Convert an address to a checksummed format (EIP-55).' \
'to-checksum:Convert an address to a checksummed format (EIP-55).' \
'ta:Convert an address to a checksummed format (EIP-55).' \
'2a:Convert an address to a checksummed format (EIP-55).' \
'--to-ascii:Convert hex data to an ASCII string.' \
'to-ascii:Convert hex data to an ASCII string.' \
'tas:Convert hex data to an ASCII string.' \
'2as:Convert hex data to an ASCII string.' \
'--from-fix:Convert a fixed point number into an integer.' \
'from-fix:Convert a fixed point number into an integer.' \
'ff:Convert a fixed point number into an integer.' \
'--to-bytes32:Right-pads hex data to 32 bytes.' \
'to-bytes32:Right-pads hex data to 32 bytes.' \
'tb:Right-pads hex data to 32 bytes.' \
'2b:Right-pads hex data to 32 bytes.' \
'--to-fix:Convert an integer into a fixed point number.' \
'to-fix:Convert an integer into a fixed point number.' \
'tf:Convert an integer into a fixed point number.' \
'2f:Convert an integer into a fixed point number.' \
'--to-uint256:Convert a number to a hex-encoded uint256.' \
'to-uint256:Convert a number to a hex-encoded uint256.' \
'tu:Convert a number to a hex-encoded uint256.' \
'2u:Convert a number to a hex-encoded uint256.' \
'--to-int256:Convert a number to a hex-encoded int256.' \
'to-int256:Convert a number to a hex-encoded int256.' \
'ti:Convert a number to a hex-encoded int256.' \
'2i:Convert a number to a hex-encoded int256.' \
'shl:Perform a left shifting operation' \
'shr:Perform a right shifting operation' \
'--to-unit:Convert an ETH amount into another unit (ether, gwei or wei).' \
'to-unit:Convert an ETH amount into another unit (ether, gwei or wei).' \
'tun:Convert an ETH amount into another unit (ether, gwei or wei).' \
'2un:Convert an ETH amount into another unit (ether, gwei or wei).' \
'--to-wei:Convert an ETH amount to wei. Consider using --to-unit.' \
'to-wei:Convert an ETH amount to wei. Consider using --to-unit.' \
'tw:Convert an ETH amount to wei. Consider using --to-unit.' \
'2w:Convert an ETH amount to wei. Consider using --to-unit.' \
'--from-wei:Convert wei into an ETH amount. Consider using --to-unit.' \
'from-wei:Convert wei into an ETH amount. Consider using --to-unit.' \
'fw:Convert wei into an ETH amount. Consider using --to-unit.' \
'--to-rlp:RLP encodes hex data, or an array of hex data' \
'--from-rlp:Decodes RLP encoded data. Input must be hexadecimal.' \
'--to-base:Converts a number of one base to another' \
'--to-radix:Converts a number of one base to another' \
'to-radix:Converts a number of one base to another' \
'to-base:Converts a number of one base to another' \
'tr:Converts a number of one base to another' \
'2r:Converts a number of one base to another' \
'--to-hex:Converts a number of one base to another' \
'to-hex:Converts a number of one base to another' \
'th:Converts a number of one base to another' \
'2h:Converts a number of one base to another' \
'--to-dec:Converts a number of one base to another' \
'to-dec:Converts a number of one base to another' \
'td:Converts a number of one base to another' \
'2d:Converts a number of one base to another' \
'access-list:Create an access list for a transaction.' \
'ac:Create an access list for a transaction.' \
'acl:Create an access list for a transaction.' \
'block:Get information about a block.' \
'bl:Get information about a block.' \
'block-number:Get the latest block number.' \
'bn:Get the latest block number.' \
'call:Perform a call on an account without publishing a transaction.' \
'c:Perform a call on an account without publishing a transaction.' \
'calldata:ABI-encode a function with arguments.' \
'cd:ABI-encode a function with arguments.' \
'chain:Get the symbolic name of the current chain.' \
'ch:Get the symbolic name of the current chain.' \
'chain-id:Get the Ethereum chain ID.' \
'ci:Get the Ethereum chain ID.' \
'cid:Get the Ethereum chain ID.' \
'client:Get the current client version.' \
'cl:Get the current client version.' \
'compute-address:Compute the contract address from a given nonce and deployer address.' \
'ca:Compute the contract address from a given nonce and deployer address.' \
'namehash:Calculate the ENS namehash of a name.' \
'na:Calculate the ENS namehash of a name.' \
'nh:Calculate the ENS namehash of a name.' \
'tx:Get information about a transaction.' \
't:Get information about a transaction.' \
'receipt:Get the transaction receipt for a transaction.' \
're:Get the transaction receipt for a transaction.' \
'send:Sign and publish a transaction.' \
's:Sign and publish a transaction.' \
'publish:Publish a raw transaction to the network.' \
'p:Publish a raw transaction to the network.' \
'estimate:Estimate the gas cost of a transaction.' \
'e:Estimate the gas cost of a transaction.' \
'--calldata-decode:Decode ABI-encoded input data.' \
'cdd:Decode ABI-encoded input data.' \
'--abi-decode:Decode ABI-encoded input or output data' \
'ad:Decode ABI-encoded input or output data' \
'abi-encode:ABI encode the given function argument, excluding the selector.' \
'ae:ABI encode the given function argument, excluding the selector.' \
'index:Compute the storage slot for an entry in a mapping.' \
'in:Compute the storage slot for an entry in a mapping.' \
'4byte:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4b:Get the function signatures for the given selector from https://sig.eth.samczsun.com.' \
'4byte-decode:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4d:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4bd:Decode ABI-encoded calldata using https://sig.eth.samczsun.com.' \
'4byte-event:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'4e:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'4be:Get the event signature for a given topic 0 from https://sig.eth.samczsun.com.' \
'upload-signature:Upload the given signatures to https://sig.eth.samczsun.com.' \
'ups:Upload the given signatures to https://sig.eth.samczsun.com.' \
'pretty-calldata:Pretty print calldata.' \
'pc:Pretty print calldata.' \
'age:Get the timestamp of a block.' \
'a:Get the timestamp of a block.' \
'balance:Get the balance of an account in wei.' \
'b:Get the balance of an account in wei.' \
'basefee:Get the basefee of a block.' \
'ba:Get the basefee of a block.' \
'fee:Get the basefee of a block.' \
'code:Get the bytecode of a contract.' \
'co:Get the bytecode of a contract.' \
'gas-price:Get the current gas price.' \
'g:Get the current gas price.' \
'keccak:Hash arbitrary data using keccak-256.' \
'k:Hash arbitrary data using keccak-256.' \
'resolve-name:Perform an ENS lookup.' \
'rn:Perform an ENS lookup.' \
'lookup-address:Perform an ENS reverse lookup.' \
'l:Perform an ENS reverse lookup.' \
'storage:Get the raw value of a contract'\''s storage slot.' \
'st:Get the raw value of a contract'\''s storage slot.' \
'proof:Generate a storage proof for a given storage slot.' \
'pr:Generate a storage proof for a given storage slot.' \
'nonce:Get the nonce for an account.' \
'n:Get the nonce for an account.' \
'etherscan-source:Get the source code of a contract from Etherscan.' \
'et:Get the source code of a contract from Etherscan.' \
'src:Get the source code of a contract from Etherscan.' \
'wallet:Wallet management utilities.' \
'w:Wallet management utilities.' \
'interface:Generate a Solidity interface from a given ABI.' \
'i:Generate a Solidity interface from a given ABI.' \
'sig:Get the selector for a function.' \
'si:Get the selector for a function.' \
'find-block:Get the block number closest to the provided timestamp.' \
'f:Get the block number closest to the provided timestamp.' \
'completions:Generate shell completions script' \
'com:Generate shell completions script' \
'generate-fig-spec:Generate Fig autocompletion spec.' \
'fig:Generate Fig autocompletion spec.' \
'run:Runs a published transaction in a local environment and prints the trace.' \
'r:Runs a published transaction in a local environment and prints the trace.' \
'rpc:Perform a raw JSON-RPC request' \
'rp:Perform a raw JSON-RPC request' \
'--format-bytes32-string:Formats a string into bytes32 encoding.' \
'--parse-bytes32-string:Parses a string from bytes32 encoding.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast commands' commands "$@"
}
(( $+functions[_cast__--abi-decode_commands] )) ||
_cast__--abi-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast --abi-decode commands' commands "$@"
}
(( $+functions[_cast__--address-zero_commands] )) ||
_cast__--address-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast --address-zero commands' commands "$@"
}
(( $+functions[_cast__--calldata-decode_commands] )) ||
_cast__--calldata-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast --calldata-decode commands' commands "$@"
}
(( $+functions[_cast__--concat-hex_commands] )) ||
_cast__--concat-hex_commands() {
    local commands; commands=()
    _describe -t commands 'cast --concat-hex commands' commands "$@"
}
(( $+functions[_cast__call__--create_commands] )) ||
_cast__call__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast call --create commands' commands "$@"
}
(( $+functions[_cast__estimate__--create_commands] )) ||
_cast__estimate__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast estimate --create commands' commands "$@"
}
(( $+functions[_cast__send__--create_commands] )) ||
_cast__send__--create_commands() {
    local commands; commands=()
    _describe -t commands 'cast send --create commands' commands "$@"
}
(( $+functions[_cast__--format-bytes32-string_commands] )) ||
_cast__--format-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast --format-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__--from-bin_commands] )) ||
_cast__--from-bin_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-bin commands' commands "$@"
}
(( $+functions[_cast__--from-fix_commands] )) ||
_cast__--from-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-fix commands' commands "$@"
}
(( $+functions[_cast__--from-rlp_commands] )) ||
_cast__--from-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-rlp commands' commands "$@"
}
(( $+functions[_cast__--from-utf8_commands] )) ||
_cast__--from-utf8_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-utf8 commands' commands "$@"
}
(( $+functions[_cast__--from-wei_commands] )) ||
_cast__--from-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast --from-wei commands' commands "$@"
}
(( $+functions[_cast__--hash-zero_commands] )) ||
_cast__--hash-zero_commands() {
    local commands; commands=()
    _describe -t commands 'cast --hash-zero commands' commands "$@"
}
(( $+functions[_cast__--max-int_commands] )) ||
_cast__--max-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast --max-int commands' commands "$@"
}
(( $+functions[_cast__--max-uint_commands] )) ||
_cast__--max-uint_commands() {
    local commands; commands=()
    _describe -t commands 'cast --max-uint commands' commands "$@"
}
(( $+functions[_cast__--min-int_commands] )) ||
_cast__--min-int_commands() {
    local commands; commands=()
    _describe -t commands 'cast --min-int commands' commands "$@"
}
(( $+functions[_cast__--parse-bytes32-string_commands] )) ||
_cast__--parse-bytes32-string_commands() {
    local commands; commands=()
    _describe -t commands 'cast --parse-bytes32-string commands' commands "$@"
}
(( $+functions[_cast__--to-ascii_commands] )) ||
_cast__--to-ascii_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-ascii commands' commands "$@"
}
(( $+functions[_cast__--to-base_commands] )) ||
_cast__--to-base_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-base commands' commands "$@"
}
(( $+functions[_cast__--to-bytes32_commands] )) ||
_cast__--to-bytes32_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-bytes32 commands' commands "$@"
}
(( $+functions[_cast__--to-checksum-address_commands] )) ||
_cast__--to-checksum-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-checksum-address commands' commands "$@"
}
(( $+functions[_cast__--to-fix_commands] )) ||
_cast__--to-fix_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-fix commands' commands "$@"
}
(( $+functions[_cast__--to-hexdata_commands] )) ||
_cast__--to-hexdata_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-hexdata commands' commands "$@"
}
(( $+functions[_cast__--to-int256_commands] )) ||
_cast__--to-int256_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-int256 commands' commands "$@"
}
(( $+functions[_cast__--to-rlp_commands] )) ||
_cast__--to-rlp_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-rlp commands' commands "$@"
}
(( $+functions[_cast__--to-uint256_commands] )) ||
_cast__--to-uint256_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-uint256 commands' commands "$@"
}
(( $+functions[_cast__--to-unit_commands] )) ||
_cast__--to-unit_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-unit commands' commands "$@"
}
(( $+functions[_cast__--to-wei_commands] )) ||
_cast__--to-wei_commands() {
    local commands; commands=()
    _describe -t commands 'cast --to-wei commands' commands "$@"
}
(( $+functions[_cast__4byte_commands] )) ||
_cast__4byte_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte commands' commands "$@"
}
(( $+functions[_cast__4byte-decode_commands] )) ||
_cast__4byte-decode_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte-decode commands' commands "$@"
}
(( $+functions[_cast__4byte-event_commands] )) ||
_cast__4byte-event_commands() {
    local commands; commands=()
    _describe -t commands 'cast 4byte-event commands' commands "$@"
}
(( $+functions[_cast__abi-encode_commands] )) ||
_cast__abi-encode_commands() {
    local commands; commands=()
    _describe -t commands 'cast abi-encode commands' commands "$@"
}
(( $+functions[_cast__access-list_commands] )) ||
_cast__access-list_commands() {
    local commands; commands=()
    _describe -t commands 'cast access-list commands' commands "$@"
}
(( $+functions[_cast__wallet__address_commands] )) ||
_cast__wallet__address_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet address commands' commands "$@"
}
(( $+functions[_cast__age_commands] )) ||
_cast__age_commands() {
    local commands; commands=()
    _describe -t commands 'cast age commands' commands "$@"
}
(( $+functions[_cast__balance_commands] )) ||
_cast__balance_commands() {
    local commands; commands=()
    _describe -t commands 'cast balance commands' commands "$@"
}
(( $+functions[_cast__basefee_commands] )) ||
_cast__basefee_commands() {
    local commands; commands=()
    _describe -t commands 'cast basefee commands' commands "$@"
}
(( $+functions[_cast__block_commands] )) ||
_cast__block_commands() {
    local commands; commands=()
    _describe -t commands 'cast block commands' commands "$@"
}
(( $+functions[_cast__block-number_commands] )) ||
_cast__block-number_commands() {
    local commands; commands=()
    _describe -t commands 'cast block-number commands' commands "$@"
}
(( $+functions[_cast__call_commands] )) ||
_cast__call_commands() {
    local commands; commands=(
'--create:Simulate a contract deployment.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast call commands' commands "$@"
}
(( $+functions[_cast__calldata_commands] )) ||
_cast__calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast calldata commands' commands "$@"
}
(( $+functions[_cast__chain_commands] )) ||
_cast__chain_commands() {
    local commands; commands=()
    _describe -t commands 'cast chain commands' commands "$@"
}
(( $+functions[_cast__chain-id_commands] )) ||
_cast__chain-id_commands() {
    local commands; commands=()
    _describe -t commands 'cast chain-id commands' commands "$@"
}
(( $+functions[_cast__client_commands] )) ||
_cast__client_commands() {
    local commands; commands=()
    _describe -t commands 'cast client commands' commands "$@"
}
(( $+functions[_cast__code_commands] )) ||
_cast__code_commands() {
    local commands; commands=()
    _describe -t commands 'cast code commands' commands "$@"
}
(( $+functions[_cast__completions_commands] )) ||
_cast__completions_commands() {
    local commands; commands=()
    _describe -t commands 'cast completions commands' commands "$@"
}
(( $+functions[_cast__compute-address_commands] )) ||
_cast__compute-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast compute-address commands' commands "$@"
}
(( $+functions[_cast__estimate_commands] )) ||
_cast__estimate_commands() {
    local commands; commands=(
'--create:Estimate gas cost to deploy a smart contract' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast estimate commands' commands "$@"
}
(( $+functions[_cast__etherscan-source_commands] )) ||
_cast__etherscan-source_commands() {
    local commands; commands=()
    _describe -t commands 'cast etherscan-source commands' commands "$@"
}
(( $+functions[_cast__find-block_commands] )) ||
_cast__find-block_commands() {
    local commands; commands=()
    _describe -t commands 'cast find-block commands' commands "$@"
}
(( $+functions[_cast__gas-price_commands] )) ||
_cast__gas-price_commands() {
    local commands; commands=()
    _describe -t commands 'cast gas-price commands' commands "$@"
}
(( $+functions[_cast__generate-fig-spec_commands] )) ||
_cast__generate-fig-spec_commands() {
    local commands; commands=()
    _describe -t commands 'cast generate-fig-spec commands' commands "$@"
}
(( $+functions[_cast__call__help_commands] )) ||
_cast__call__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast call help commands' commands "$@"
}
(( $+functions[_cast__estimate__help_commands] )) ||
_cast__estimate__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast estimate help commands' commands "$@"
}
(( $+functions[_cast__help_commands] )) ||
_cast__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast help commands' commands "$@"
}
(( $+functions[_cast__send__help_commands] )) ||
_cast__send__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast send help commands' commands "$@"
}
(( $+functions[_cast__wallet__help_commands] )) ||
_cast__wallet__help_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet help commands' commands "$@"
}
(( $+functions[_cast__index_commands] )) ||
_cast__index_commands() {
    local commands; commands=()
    _describe -t commands 'cast index commands' commands "$@"
}
(( $+functions[_cast__interface_commands] )) ||
_cast__interface_commands() {
    local commands; commands=()
    _describe -t commands 'cast interface commands' commands "$@"
}
(( $+functions[_cast__keccak_commands] )) ||
_cast__keccak_commands() {
    local commands; commands=()
    _describe -t commands 'cast keccak commands' commands "$@"
}
(( $+functions[_cast__lookup-address_commands] )) ||
_cast__lookup-address_commands() {
    local commands; commands=()
    _describe -t commands 'cast lookup-address commands' commands "$@"
}
(( $+functions[_cast__namehash_commands] )) ||
_cast__namehash_commands() {
    local commands; commands=()
    _describe -t commands 'cast namehash commands' commands "$@"
}
(( $+functions[_cast__wallet__new_commands] )) ||
_cast__wallet__new_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet new commands' commands "$@"
}
(( $+functions[_cast__nonce_commands] )) ||
_cast__nonce_commands() {
    local commands; commands=()
    _describe -t commands 'cast nonce commands' commands "$@"
}
(( $+functions[_cast__pretty-calldata_commands] )) ||
_cast__pretty-calldata_commands() {
    local commands; commands=()
    _describe -t commands 'cast pretty-calldata commands' commands "$@"
}
(( $+functions[_cast__proof_commands] )) ||
_cast__proof_commands() {
    local commands; commands=()
    _describe -t commands 'cast proof commands' commands "$@"
}
(( $+functions[_cast__publish_commands] )) ||
_cast__publish_commands() {
    local commands; commands=()
    _describe -t commands 'cast publish commands' commands "$@"
}
(( $+functions[_cast__receipt_commands] )) ||
_cast__receipt_commands() {
    local commands; commands=()
    _describe -t commands 'cast receipt commands' commands "$@"
}
(( $+functions[_cast__resolve-name_commands] )) ||
_cast__resolve-name_commands() {
    local commands; commands=()
    _describe -t commands 'cast resolve-name commands' commands "$@"
}
(( $+functions[_cast__rpc_commands] )) ||
_cast__rpc_commands() {
    local commands; commands=()
    _describe -t commands 'cast rpc commands' commands "$@"
}
(( $+functions[_cast__run_commands] )) ||
_cast__run_commands() {
    local commands; commands=()
    _describe -t commands 'cast run commands' commands "$@"
}
(( $+functions[_cast__send_commands] )) ||
_cast__send_commands() {
    local commands; commands=(
'--create:Use to deploy raw contract bytecode' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast send commands' commands "$@"
}
(( $+functions[_cast__shl_commands] )) ||
_cast__shl_commands() {
    local commands; commands=()
    _describe -t commands 'cast shl commands' commands "$@"
}
(( $+functions[_cast__shr_commands] )) ||
_cast__shr_commands() {
    local commands; commands=()
    _describe -t commands 'cast shr commands' commands "$@"
}
(( $+functions[_cast__sig_commands] )) ||
_cast__sig_commands() {
    local commands; commands=()
    _describe -t commands 'cast sig commands' commands "$@"
}
(( $+functions[_cast__wallet__sign_commands] )) ||
_cast__wallet__sign_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet sign commands' commands "$@"
}
(( $+functions[_cast__storage_commands] )) ||
_cast__storage_commands() {
    local commands; commands=()
    _describe -t commands 'cast storage commands' commands "$@"
}
(( $+functions[_cast__tx_commands] )) ||
_cast__tx_commands() {
    local commands; commands=()
    _describe -t commands 'cast tx commands' commands "$@"
}
(( $+functions[_cast__upload-signature_commands] )) ||
_cast__upload-signature_commands() {
    local commands; commands=()
    _describe -t commands 'cast upload-signature commands' commands "$@"
}
(( $+functions[_cast__wallet__vanity_commands] )) ||
_cast__wallet__vanity_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet vanity commands' commands "$@"
}
(( $+functions[_cast__wallet__verify_commands] )) ||
_cast__wallet__verify_commands() {
    local commands; commands=()
    _describe -t commands 'cast wallet verify commands' commands "$@"
}
(( $+functions[_cast__wallet_commands] )) ||
_cast__wallet_commands() {
    local commands; commands=(
'new:Create a new random keypair.' \
'n:Create a new random keypair.' \
'vanity:Generate a vanity address.' \
'va:Generate a vanity address.' \
'address:Convert a private key to an address.' \
'a:Convert a private key to an address.' \
'addr:Convert a private key to an address.' \
'sign:Sign a message.' \
's:Sign a message.' \
'verify:Verify the signature of a message.' \
'v:Verify the signature of a message.' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'cast wallet commands' commands "$@"
}

_cast "$@"
